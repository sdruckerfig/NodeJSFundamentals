/*
 * File: app/view/Persons.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.Persons', {
    extend: 'Ext.window.Window',
    alias: 'widget.personswindow',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.form.field.Text',
        'Ext.grid.plugin.RowEditing',
        'Ext.panel.Tool'
    ],

    height: 250,
    width: 400,
    layout: 'fit',
    title: 'Users Editor',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    header: false,
                    title: 'My Grid Panel',
                    store: 'Persons',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'firstName',
                            text: 'First Name',
                            flex: 1,
                            editor: {
                                xtype: 'textfield'
                            }
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'lastName',
                            text: 'Last Name',
                            flex: 1,
                            editor: {
                                xtype: 'textfield'
                            }
                        }
                    ],
                    plugins: [
                        Ext.create('Ext.grid.plugin.RowEditing', {

                        })
                    ],
                    listeners: {
                        select: {
                            fn: me.onGridpanelSelect,
                            scope: me
                        }
                    }
                }
            ],
            tools: [
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        var grid = tool.up('window').down('grid');
                        grid.getStore().add({});
                    },
                    itemId: 'AddNew',
                    type: 'plus'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {

                        var grid = tool.up('window').down('grid');
                        var rec = grid.getSelectionModel().getSelection();
                        grid.getStore().remove(rec);
                        grid.getStore().sync();
                    },
                    disabled: true,
                    itemId: 'btnDelete',
                    type: 'minus'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        tool.up('window').down('grid').getStore().load();
                    },
                    itemId: 'refresh',
                    type: 'refresh'
                }
            ]
        });

        me.callParent(arguments);
    },

    onGridpanelSelect: function(rowmodel, record, index, eOpts) {
        if (record) {

            this.down('#btnDelete').enable();
        } else {
             this.down('#btnDelete').disable();
        }
    }

});